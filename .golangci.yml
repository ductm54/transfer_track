# This file contains configuration for golangci-lint
# https://golangci-lint.run/usage/configuration/

# Current version of golangci-lint
# Required for golangci-lint v2.0.0 and higher
version: 2

run:
  # Timeout for analysis, e.g. 30s, 5m.
  # Default: 1m
  timeout: 5m

  # Include test files or not.
  # Default: true
  tests: true

  # Allow multiple parallel golangci-lint instances running.
  # Default: false
  allow-parallel-runners: true

  # Define the Go version limit.
  # Mainly related to generics support since go1.18.
  # Default: use Go version from the go.mod file, fallback on the env var `GOVERSION`, fallback on 1.18
  go: '1.24'

# Output configuration options
output:
  # Format: colored-line-number|line-number|json|tab|checkstyle|code-climate|junit-xml|github-actions
  # Default: colored-line-number
  format: colored-line-number

  # Print lines of code with issue.
  # Default: true
  print-issued-lines: true

  # Print linter name in the end of issue text.
  # Default: true
  print-linter-name: true

  # Make issues output unique by line.
  # Default: true
  uniq-by-line: true

  # Add a prefix to the output file references.
  # Default is no prefix.
  path-prefix: ""

  # Sort results by: filepath, line and column.
  sort-results: true

# Linters settings configuration
linters-settings:
  dogsled:
    # Checks assignments with too many blank identifiers.
    # Default: 2
    max-blank-identifiers: 2

  errcheck:
    # Report about not checking of errors in type assertions: `a := b.(MyStruct)`.
    # Default: false
    check-type-assertions: true

    # Report about assignment of errors to blank identifier: `num, _ := strconv.Atoi(numStr)`.
    # Default: false
    check-blank: true

  errorlint:
    # Check whether fmt.Errorf uses the %w verb for formatting errors.
    # See https://github.com/polyfloyd/go-errorlint
    errorf: true

    # Check for plain type assertions and type switches.
    asserts: true

    # Check for plain error comparisons.
    comparison: true

  exhaustive:
    # Check switch statements in generated files also.
    # Default: false
    check-generated: false

    # Presence of "default" case in switch statements satisfies exhaustiveness.
    # Default: false
    default-signifies-exhaustive: false

  gocognit:
    # Minimal code complexity to report.
    # Default: 30 (but we recommend 10-20)
    min-complexity: 20

  goconst:
    # Minimal length of string constant.
    # Default: 3
    min-len: 3

    # Minimum occurrences of constant string count to trigger issue.
    # Default: 3
    min-occurrences: 3

  gocritic:
    # Enable multiple checks by tags, run `GL_DEBUG=gocritic golangci-lint run` to see all tags and checks.
    # Empty list by default. See https://github.com/go-critic/go-critic#usage -> section "Tags".
    enabled-tags:
      - diagnostic
      - style
      - performance
      - experimental
    disabled-checks:
      - hugeParam
      - rangeValCopy

  gocyclo:
    # Minimal code complexity to report.
    # Default: 30 (but we recommend 10-20)
    min-complexity: 20

  godot:
    # Comments to be checked: `declarations`, `toplevel`, or `all`.
    # Default: declarations
    scope: declarations

    # List of regexps for excluding particular comment lines from check.
    exclude:
      # Exclude todo and fixme comments.
      - '^fixme:'
      - '^todo:'

    # Check that each sentence starts with a capital letter.
    # Default: true
    capital: true

  gofmt:
    # Simplify code: gofmt with `-s` option.
    # Default: true
    simplify: true

  goimports:
    # Put imports beginning with prefix after 3rd-party packages.
    # It's a comma-separated list of prefixes.
    local-prefixes: github.com/ductm54/transfer-track

  gomnd:
    # List of function patterns to exclude from analysis.
    # Values always ignored: `time.Date`,
    # `strconv.FormatInt`, `strconv.FormatUint`, `strconv.FormatFloat`,
    # `strconv.ParseInt`, `strconv.ParseUint`, `strconv.ParseFloat`.
    ignored-functions:
      - os.Chmod
      - os.Mkdir
      - os.MkdirAll
      - os.OpenFile
      - os.WriteFile
      - prometheus.ExponentialBuckets
      - prometheus.LinearBuckets

  govet:
    # Enable all analyzers.
    # Default: false
    enable-all: true
    # Disable analyzers by name.
    # Run `go tool vet help` to see all analyzers.
    disable:
      - fieldalignment # too strict
    # Settings per analyzer.
    settings:
      shadow:
        # Whether to be strict about shadowing; can be noisy.
        # Default: false
        strict: true

  misspell:
    # Correct spellings using locale preferences for US or UK.
    # Setting locale to US will correct the British spelling of 'colour' to 'color'.
    # Default is to use a neutral variety of English.
    locale: US

  nakedret:
    # Make an issue if func has more lines of code than this setting, and it has naked returns.
    # Default: 30
    max-func-lines: 30

  nestif:
    # Minimal complexity of if statements to report.
    # Default: 5
    min-complexity: 5

  nilnil:
    # Checks that there is no simultaneous return of `nil` error and an invalid value.
    checked-types:
      - ptr
      - slice
      - map
      - chan
      - func

  revive:
    # Maximum number of open files at the same time.
    # See https://github.com/mgechev/revive#command-line-flags
    # Default: 2048
    max-open-files: 2048
    # When set to false, ignores files with "GENERATED" header, similar to golint.
    # See https://github.com/mgechev/revive#available-rules for details.
    # Default: true
    ignore-generated-header: true
    # Sets the default severity.
    # See https://github.com/mgechev/revive#configuration
    # Default: warning
    severity: warning
    # Enable all available rules.
    # Default: false
    enable-all-rules: false
    # Sets the default failure confidence.
    # This means that linting errors with less than 0.8 confidence will be ignored.
    # Default: 0.8
    confidence: 0.8

  staticcheck:
    # Select the Go version to target.
    # Default: 1.13
    go: "1.24"
    # https://staticcheck.io/docs/options#checks
    checks: ["all"]

  stylecheck:
    # Select the Go version to target.
    # Default: 1.13
    go: "1.24"
    # https://staticcheck.io/docs/options#checks
    checks: ["all", "-ST1000", "-ST1003", "-ST1016", "-ST1020", "-ST1021", "-ST1022"]
    # https://staticcheck.io/docs/options#dot_import_whitelist
    dot-import-whitelist:
      - fmt
    # https://staticcheck.io/docs/options#initialisms
    initialisms: ["ACL", "API", "ASCII", "CPU", "CSS", "DNS", "EOF", "GUID", "HTML", "HTTP", "HTTPS", "ID", "IP", "JSON", "QPS", "RAM", "RPC", "SLA", "SMTP", "SQL", "SSH", "TCP", "TLS", "TTL", "UDP", "UI", "GID", "UID", "UUID", "URI", "URL", "UTF8", "VM", "XML", "XMPP", "XSRF", "XSS"]
    # https://staticcheck.io/docs/options#http_status_code_whitelist
    http-status-code-whitelist: ["200", "400", "404", "500"]

  unparam:
    # Inspect exported functions.
    # Default: true
    check-exported: true

  unused:
    # Select the Go version to target.
    # Default: 1.13
    go: "1.24"

  whitespace:
    # Enforces newlines (or comments) after every multi-line if statement.
    # Default: false
    multi-if: true
    # Enforces newlines (or comments) after every multi-line function signature.
    # Default: false
    multi-func: true

# Linters configuration
linters:
  # Enable specific linter
  # https://golangci-lint.run/usage/linters/
  enable:
    - asasalint
    - asciicheck
    - bidichk
    - bodyclose
    - containedctx
    - contextcheck
    - cyclop
    - decorder
    - dogsled
    - durationcheck
    - errcheck
    - errchkjson
    - errname
    - errorlint
    - exhaustive
    - forbidigo
    - gochecknoinits
    - gocognit
    - goconst
    - gocritic
    - gocyclo
    - godot
    - gomoddirectives
    - gomodguard
    - goprintffuncname
    - gosec
    - govet
    - grouper
    - importas
    - ineffassign
    - loggercheck
    - makezero
    - misspell
    - nakedret
    - nestif
    - nilerr
    - nilnil
    - noctx
    - nosprintfhostport
    - prealloc
    - predeclared
    - promlinter
    - reassign
    - revive
    - rowserrcheck
    - sqlclosecheck
    - staticcheck
    - testableexamples
    - testpackage
    - thelper
    - tparallel
    - unconvert
    - unparam
    - unused
    - usestdlibvars
    - wastedassign
    - whitespace
    - wrapcheck
    - wsl

  # Disable specific linter
  disable:
    - depguard # too restrictive for our needs
    - exhaustruct # too many false positives
    - gochecknoglobals # too restrictive
    - godox # we use TODOs and FIXMEs
    - goheader # we don't need file headers
    - interfacebloat # too many false positives
    - ireturn # too restrictive
    - paralleltest # too many false positives
    - tagliatelle # we use different naming conventions
    - varnamelen # too many false positives
    - wsl # too strict about whitespace and comments

  # Run only fast linters from enabled linters set (first run won't be fast)
  # Default: false
  fast: false

# Issues configuration
issues:
  # List of regexps of issue texts to exclude.
  exclude-rules:
    # Exclude some linters from running on tests files.
    - path: _test\.go
      linters:
        - goconst
        - gomnd

    # Exclude known linters from partially hard-vendored code,
    # which is impossible to exclude via "nolint" comments.
    - path: internal/hmac/
      text: "weak cryptographic primitive"
      linters:
        - gosec

    # Exclude some staticcheck messages
    - linters:
        - staticcheck
      text: "SA1019:"

  # Maximum issues count per one linter.
  # Set to 0 to disable.
  # Default: 50
  max-issues-per-linter: 0

  # Maximum count of issues with the same text.
  # Set to 0 to disable.
  # Default: 3
  max-same-issues: 0

  # Show only new issues: if there are unstaged changes or untracked files,
  # only those changes are analyzed, else only changes in HEAD~ are analyzed.
  # It's a super-useful option for integration of golangci-lint into existing large codebase.
  # Default: false
  new: false

  # Fix found issues (if it's supported by the linter)
  fix: false
